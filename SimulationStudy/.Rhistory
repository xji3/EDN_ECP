sd(TenthTau.target_summary["r3", TenthTau.col.names]), sd(HalfTau.target_summary["r3", HalfTau.col.names]), sd(target_summary["r3", col.names])
),
3, 9)
colnames(matrix.print) <- c("Total samples","mean tract length","sd tract length","mean Tau","sd Tau",
"mean r2", "sd r2", "mean r3", "sd r3")
rownames(matrix.print) <- c("TenthTau", "HalfTau", "Tau")
print("Now showing summary of estimates")
print(matrix.print)
}
assign(paste("TenthTau_HMM_Tract_", toString(tract), "_plot", sep = ""), hmm.tract.plots)
rm(list=ls())  # clean up workspace
setwd("/Users/xji3/GitFolders/YeastIGCTract/SimulationStudy/")
source("./ReadInSummary.R")
TenthTau_HMM_Tract_10_plot
# Now read in HMM results from plots
Tract.list <- c(3.0, 10.0, 50.0, 100.0, 200.0, 300.0, 400.0, 500.0)
for(tract in Tract.list){
hmm.tract.plots <- NULL
for(sim in 1:100){
hmm.plot <- paste("./plot/Tract_", toString(tract), '.0_HKY/sim_',
toString(sim), '/HMM_YDR418W_YEL054C_lnL_sim_',
toString(sim), '_1D_surface.txt', sep = "")
if (file.exists(hmm.plot)){
lnL.surface <- read.table(hmm.plot)
max.idx <- which.max(lnL.surface[, 2])
new.summary <- matrix(c(3.0*exp(-lnL.surface[max.idx, 1]), lnL.surface[max.idx, 2]), 2, 1)
rownames(new.summary) <- c("tract in nt", "lnL")
colnames(new.summary) <- paste("sim_", toString(sim), sep = "")
hmm.tract.plots <- cbind(hmm.tract.plots, new.summary)
}
}
assign(paste("HMM_Tract_", toString(tract), "_plot", sep = ""), hmm.tract.plots)
}
setwd("/Users/xji3/GitFolders/YeastIGCTract/SimulationStudy/")
Tract.list <- c(3.0, 10.0, 50.0, 100.0, 200.0, 300.0, 400.0, 500.0)
for(tract in Tract.list){
hmm.tract.plots <- NULL
for(sim in 1:100){
hmm.plot <- paste("./plot/Tract_", toString(tract), '.0_HKY/sim_',
toString(sim), '/HMM_YDR418W_YEL054C_lnL_sim_',
toString(sim), '_1D_surface.txt', sep = "")
if (file.exists(hmm.plot)){
lnL.surface <- read.table(hmm.plot)
max.idx <- which.max(lnL.surface[, 2])
new.summary <- matrix(c(3.0*exp(-lnL.surface[max.idx, 1]), lnL.surface[max.idx, 2]), 2, 1)
rownames(new.summary) <- c("tract in nt", "lnL")
colnames(new.summary) <- paste("sim_", toString(sim), sep = "")
hmm.tract.plots <- cbind(hmm.tract.plots, new.summary)
}
}
assign(paste("HMM_Tract_", toString(tract), "_plot", sep = ""), hmm.tract.plots)
}
hmm.plot
# Now read in HMM results from plots
Tract.list <- c(3.0, 10.0, 50.0, 100.0, 200.0, 300.0, 400.0, 500.0)
for(tract in Tract.list){
hmm.tract.plots <- NULL
for(sim in 1:100){
hmm.plot <- paste("./plot/Tract_", toString(tract), '.0_HKY/sim_',
toString(sim), '/HMM_YDR418W_YEL054C_HKY_rv_lnL_sim_',
toString(sim), '_1D_surface.txt', sep = "")
if (file.exists(hmm.plot)){
lnL.surface <- read.table(hmm.plot)
max.idx <- which.max(lnL.surface[, 2])
new.summary <- matrix(c(3.0*exp(-lnL.surface[max.idx, 1]), lnL.surface[max.idx, 2]), 2, 1)
rownames(new.summary) <- c("tract in nt", "lnL")
colnames(new.summary) <- paste("sim_", toString(sim), sep = "")
hmm.tract.plots <- cbind(hmm.tract.plots, new.summary)
}
}
assign(paste("HMM_Tract_", toString(tract), "_plot", sep = ""), hmm.tract.plots)
}
hmm.plot
file.exists(hmm.plot)
getwd()
setwd("/Users/xji3/GitFolders/YeastIGCTract/SimulationStudy/")
getwd()
setwd("/Users/xji3/GitFolders/YeastIGCTract/SimulationStudy/")
getwd()
# Now read in HMM results from plots
Tract.list <- c(3.0, 10.0, 50.0, 100.0, 200.0, 300.0, 400.0, 500.0)
for(tract in Tract.list){
hmm.tract.plots <- NULL
for(sim in 1:100){
hmm.plot <- paste("./plot/Tract_", toString(tract), '.0_HKY/sim_',
toString(sim), '/HMM_YDR418W_YEL054C_HKY_rv_lnL_sim_',
toString(sim), '_1D_surface.txt', sep = "")
if (file.exists(hmm.plot)){
lnL.surface <- read.table(hmm.plot)
max.idx <- which.max(lnL.surface[, 2])
new.summary <- matrix(c(3.0*exp(-lnL.surface[max.idx, 1]), lnL.surface[max.idx, 2]), 2, 1)
rownames(new.summary) <- c("tract in nt", "lnL")
colnames(new.summary) <- paste("sim_", toString(sim), sep = "")
hmm.tract.plots <- cbind(hmm.tract.plots, new.summary)
}
}
assign(paste("HMM_Tract_", toString(tract), "_plot", sep = ""), hmm.tract.plots)
}
View(HMM_Tract_10_plot)
hist(HMM_Tract_100_plot[1,])
hist(HMM_Tract_100_plot[1,], breaks = 509)
hist(HMM_Tract_100_plot[1,], breaks = 50)
hist(HMM_Tract_50_plot[1,], breaks = 50)
hist(Half_HMM_Tract_50_plot[1,], breaks = 50)
hist(HalfTau_HMM_Tract_50_plot[1,], breaks = 50)
View(HalfTau_PSJS_HKY_Tract_10_combined_summary)
Tract.list <- c(3.0, 10.0, 50.0, 100.0, 200.0, 300.0, 400.0, 500.0)
for(tract in Tract.list){
hmm.tract.plots <- NULL
for(sim in 1:100){
hmm.plot <- paste("./plot/HalfTau/Tract_", toString(tract), '.0_HKY/sim_',
toString(sim), '/HMM_YDR418W_YEL054C_HKY_rv_lnL_sim_',
toString(sim), '_1D_surface.txt', sep = "")
if (file.exists(hmm.plot)){
lnL.surface <- read.table(hmm.plot)
max.idx <- which.max(lnL.surface[, 2])
new.summary <- matrix(c(3.0*exp(-lnL.surface[max.idx, 1]), lnL.surface[max.idx, 2]), 2, 1)
rownames(new.summary) <- c("tract in nt", "lnL")
colnames(new.summary) <- paste("sim_", toString(sim), sep = "")
hmm.tract.plots <- cbind(hmm.tract.plots, new.summary)
}
}
assign(paste("HalfTau_HMM_Tract_", toString(tract), "_plot", sep = ""), hmm.tract.plots)
}
# Now read in HMM results from plots for TenthTau case
Tract.list <- c(3.0, 10.0, 50.0, 100.0, 200.0, 300.0, 400.0, 500.0)
for(tract in Tract.list){
hmm.tract.plots <- NULL
for(sim in 1:100){
hmm.plot <- paste("./plot/TenthTau/Tract_", toString(tract), '.0_HKY/sim_',
toString(sim), '/HMM_YDR418W_YEL054C_HKY_rv_lnL_sim_',
toString(sim), '_1D_surface.txt', sep = "")
if (file.exists(hmm.plot)){
lnL.surface <- read.table(hmm.plot)
max.idx <- which.max(lnL.surface[, 2])
new.summary <- matrix(c(3.0*exp(-lnL.surface[max.idx, 1]), lnL.surface[max.idx, 2]), 2, 1)
rownames(new.summary) <- c("tract in nt", "lnL")
colnames(new.summary) <- paste("sim_", toString(sim), sep = "")
hmm.tract.plots <- cbind(hmm.tract.plots, new.summary)
}
}
assign(paste("TenthTau_HMM_Tract_", toString(tract), "_plot", sep = ""), hmm.tract.plots)
}
hist(HalfTau_HMM_Tract_50_plot[1,], breaks = 50)
hist(TenthTau_HMM_Tract_50_plot[1,], breaks = 50)
hist(TenthTau_HMM_Tract_50_plot[1,TenthTau_HMM_Tract_50_plot[1,] < 500], breaks = 50)
mean(TenthTau_HMM_Tract_50_plot[1,TenthTau_HMM_Tract_50_plot[1,] < 500])
mean(TenthTau_HMM_Tract_10_plot[1,TenthTau_HMM_Tract_50_plot[1,] < 500])
mean(TenthTau_HMM_Tract_100_plot[1,TenthTau_HMM_Tract_50_plot[1,] < 500])
mean(TenthTau_HMM_Tract_100_plot[1,TenthTau_HMM_Tract_100_plot[1,] < 500])
hist(TenthTau_HMM_Tract_100_plot[1,TenthTau_HMM_Tract_100_plot[1,] < 500], breaks = 50)
hist(HalfTau_HMM_Tract_100_plot[1,TenthTau_HMM_Tract_100_plot[1,] < 500], breaks = 50)
hist(HalfTau_HMM_Tract_100_plot[1,HalfTau_HMM_Tract_100_plot[1,] < 500], breaks = 50)
mean(HalfTau_HMM_Tract_100_plot[1,HalfTau_HMM_Tract_100_plot[1,] < 500])
mean(HalfTau_HMM_Tract_200_plot[1,HalfTau_HMM_Tract_200_plot[1,] < 500])
mean(HalfTau_HMM_Tract_200_plot[1,HalfTau_HMM_Tract_200_plot[1,] < 1000])
hist(HalfTau_HMM_Tract_100_plot[1,TenthTau_HMM_Tract_100_plot[1,] < 1000], breaks = 50)
hist(HalfTau_HMM_Tract_100_plot[1,TenthTau_HMM_Tract_100_plot[1,] < 999], breaks = 50)
hist(HalfTau_HMM_Tract_100_plot[1,TenthTau_HMM_Tract_100_plot[1,] < 990], breaks = 50)
hist(HalfTau_HMM_Tract_100_plot[1,TenthTau_HMM_Tract_100_plot[1,] < 900], breaks = 50)
hist(HalfTau_HMM_Tract_100_plot[1,HalfTau_HMM_Tract_100_plot[1,] < 1000], breaks = 50)
hist(HalfTau_HMM_Tract_100_plot[1,HalfTau_HMM_Tract_100_plot[1,] < 999], breaks = 50)
hist(HalfTau_HMM_Tract_200_plot[1,HalfTau_HMM_Tract_200_plot[1,] < 999], breaks = 50)
hist(HalfTau_HMM_Tract_300_plot[1,HalfTau_HMM_Tract_300_plot[1,] < 999], breaks = 50)
hist(HalfTau_HMM_Tract_400_plot[1,HalfTau_HMM_Tract_400_plot[1,] < 999], breaks = 50)
setwd("/Users/xji3/GitFolders/EDN_ECP/SimulationStudy/")
# Now read in HMM results from plots
Tract.list <- c(3.0, 10.0, 50.0, 100.0, 200.0, 300.0, 400.0, 500.0)
for(tract in Tract.list){
hmm.tract.plots <- NULL
for(sim in 1:100){
hmm.plot <- paste("./plot/Tract_", toString(tract), '.0_HKY/sim_',
toString(sim), '/HMM_EDN_ECP_HKY_rv_lnL_sim_',
toString(sim), '_1D_surface.txt', sep = "")
if (file.exists(hmm.plot)){
lnL.surface <- read.table(hmm.plot)
max.idx <- which.max(lnL.surface[, 2])
new.summary <- matrix(c(3.0*exp(-lnL.surface[max.idx, 1]), lnL.surface[max.idx, 2]), 2, 1)
rownames(new.summary) <- c("tract in nt", "lnL")
colnames(new.summary) <- paste("sim_", toString(sim), sep = "")
hmm.tract.plots <- cbind(hmm.tract.plots, new.summary)
}
}
assign(paste("HMM_Tract_", toString(tract), "_plot", sep = ""), hmm.tract.plots)
}
# Now read in HMM results from plots for HalfTau case
Tract.list <- c(3.0, 10.0, 50.0, 100.0, 200.0, 300.0, 400.0, 500.0)
for(tract in Tract.list){
hmm.tract.plots <- NULL
for(sim in 1:100){
hmm.plot <- paste("./plot/HalfTau/Tract_", toString(tract), '.0_HKY/sim_',
toString(sim), '/HMM_EDN_ECP_HKY_rv_lnL_sim_',
toString(sim), '_1D_surface.txt', sep = "")
if (file.exists(hmm.plot)){
lnL.surface <- read.table(hmm.plot)
max.idx <- which.max(lnL.surface[, 2])
new.summary <- matrix(c(3.0*exp(-lnL.surface[max.idx, 1]), lnL.surface[max.idx, 2]), 2, 1)
rownames(new.summary) <- c("tract in nt", "lnL")
colnames(new.summary) <- paste("sim_", toString(sim), sep = "")
hmm.tract.plots <- cbind(hmm.tract.plots, new.summary)
}
}
assign(paste("HalfTau_HMM_Tract_", toString(tract), "_plot", sep = ""), hmm.tract.plots)
}
# Now read in HMM results from plots for TenthTau case
Tract.list <- c(3.0, 10.0, 50.0, 100.0, 200.0, 300.0, 400.0, 500.0)
for(tract in Tract.list){
hmm.tract.plots <- NULL
for(sim in 1:100){
hmm.plot <- paste("./plot/TenthTau/Tract_", toString(tract), '.0_HKY/sim_',
toString(sim), '/HMM_EDN_ECP_HKY_rv_lnL_sim_',
toString(sim), '_1D_surface.txt', sep = "")
if (file.exists(hmm.plot)){
lnL.surface <- read.table(hmm.plot)
max.idx <- which.max(lnL.surface[, 2])
new.summary <- matrix(c(3.0*exp(-lnL.surface[max.idx, 1]), lnL.surface[max.idx, 2]), 2, 1)
rownames(new.summary) <- c("tract in nt", "lnL")
colnames(new.summary) <- paste("sim_", toString(sim), sep = "")
hmm.tract.plots <- cbind(hmm.tract.plots, new.summary)
}
}
assign(paste("TenthTau_HMM_Tract_", toString(tract), "_plot", sep = ""), hmm.tract.plots)
}
hist(HMM_Tract_10_plot[1,], breaks = 50)
mean(HMM_Tract_10_plot[1,])
mean(HMM_Tract_10_plot[1,HMM_Tract_10_plot[1,]<300])
hist(HMM_Tract_3_plot[1,], breaks = 50)
mean(HMM_Tract_3_plot[1,])
hist(HMM_Tract_50_plot[1,], breaks = 50)
mean(HMM_Tract_50_plot[1,])
hist(log(HMM_Tract_3_plot[1,]), breaks = 50)
log(3)
hist(log(HMM_Tract_10_plot[1,]), breaks = 50)
log(10)
hist(log(HMM_Tract_50_plot[1,]), breaks = 50)
log(50)
hist(log(HMM_Tract_100_plot[1,]), breaks = 50)
log(100)
log(200)
hist(log(HMM_Tract_200_plot[1,]), breaks = 50)
hist(log(HMM_Tract_300_plot[1,]), breaks = 50)
log(300)
hist(HalfTau_HMM_Tract_3_plot[1,], breaks = 50)
hist(HalfTau_HMM_Tract_3_plot[1,HalfTau_HMM_Tract_3_plot[1,]<999], breaks = 50)
mean(HalfTau_HMM_Tract_3_plot[1,HalfTau_HMM_Tract_3_plot[1,]<999])
hist(HalfTau_HMM_Tract_10_plot[1,HalfTau_HMM_Tract_10_plot[1,]<999], breaks = 50)
mean(HalfTau_HMM_Tract_10_plot[1,HalfTau_HMM_Tract_10_plot[1,]<999])
hist(HalfTau_HMM_Tract_50_plot[1,HalfTau_HMM_Tract_50_plot[1,]<999], breaks = 50)
hist(HalfTau_HMM_Tract_100_plot[1,HalfTau_HMM_Tract_100_plot[1,]<999], breaks = 50)
mean(HalfTau_HMM_Tract_50_plot[1,HalfTau_HMM_Tract_50_plot[1,]<999])
mean(HalfTau_HMM_Tract_100_plot[1,HalfTau_HMM_Tract_100_plot[1,]<999])
mean(HalfTau_HMM_Tract_200_plot[1,HalfTau_HMM_Tract_200_plot[1,]<999])
mean(HalfTau_HMM_Tract_300_plot[1,HalfTau_HMM_Tract_300_plot[1,]<999])
mean(HalfTau_HMM_Tract_400_plot[1,HalfTau_HMM_Tract_400_plot[1,]<999])
mean(HalfTau_HMM_Tract_500_plot[1,HalfTau_HMM_Tract_500_plot[1,]<999])
rm(list=ls())  # clean up workspace
setwd("/Users/xji3/GitFolders/EDN_ECP/SimulationStudy/")
source("./ReadInEDNECP.R")
realized.tract.dist <- function(L, p){
x <- 1:(L-1)
dist.1 <- (2 + (L-1-x)*p)/(1.0/p + L -1.)*(1-p)^(x-1)
dist.L <- 1/p/(1.0/p + L -1.)*(1-p)^(L-1)
dist <- c(dist.1, dist.L)
mean.L <- sum(x * dist.1) + L*dist.L
var.L <- sum(x^2 * dist.1) + L^2*dist.L - mean.L^2
return(list(dist = dist, mean = mean.L, sd = sqrt(var.L)))
}
Tract.list <- c(3.0, 10.0, 50.0, 100.0, 300.0)
for(tract in Tract.list){
target_summary <- get(paste("PSJS_HKY_Tract_", toString(tract), "_combined_summary", sep = ""))
col.names <- target_summary["tract_length", ] < 10*tract
sim_info <- get(paste("sim.tract.", toString(tract), sep = ""))
hist(target_summary["tract_length", col.names], breaks = 50,
main = paste("PSJS Estimated Tract length 1/p, Tract = ", toString(tract), ".0 ", sep = ""))
abline(v =  realized.tract.dist(492, 1.0/tract)$mean, col = "blue")
abline(v =  tract, col = 2)
abline(v =  mean(sim_info["mean subtract length", ]), col = "green")
hist(-log(target_summary["tract_length", col.names]), breaks = 50,
main = paste("PSJS Estimated ln(p), Tract = ", toString(tract), ".0", sep = ""))
abline(v = log(1.0 / realized.tract.dist(492, 1.0/tract)$mean), col = "blue")
abline(v = log(1.0 / tract), col = 2)
abline(v = log(1.0 / mean(sim_info["mean subtract length", ])), col = "green")
hist((1/target_summary["tract_length", col.names]), breaks = 50,
main = paste("PSJS Estimated p, Tract = ", toString(tract), ".0", sep = ""))
abline(v = 1.0 / tract, col = 2)
abline(v = 1.0 / realized.tract.dist(492, 1.0/tract)$mean, col = "blue")
abline(v = 1.0 / mean(sim_info["mean subtract length", ]), col = "green")
plot(sim_info["num IGC", ], sim_info["mean potential tract length", ],
main = paste("Simulated potential tract length, Tract = ", toString(tract), sep = ""),
xlab = "number of IGC events", ylab = "mean potential tract length")
abline(h = tract, col = "red")
abline(h = mean(sim_info["mean subtract length", ]), col = "green")
plot(sim_info["num IGC", ], sim_info["mean realized tract length", ],
main = paste("Simulated realized tract length, Tract = ", toString(tract), sep = ""),
xlab = "number of IGC events", ylab = "mean realized tract length")
abline(h = realized.tract.dist(492, 1/tract)$mean, col = "red")
abline(h = mean(sim_info["mean subtract length", ]), col = "green")
plot(sim_info["num IGC", colnames(target_summary)[col.names]], target_summary["tract_length", col.names],
main = paste("PSJS estimate of Tract ", toString(tract), sep = ""),
xlab = "number of IGC events", ylab = "PSJS estimated tract length")
abline(h = tract, col = "red")
abline(h = realized.tract.dist(492, 1/tract)$mean, col = "blue")
abline(h = mean(sim_info["mean subtract length", ]), col = "green")
plot(sim_info["num IGC", colnames(target_summary)[col.names]], target_summary["tract_length", col.names],
main = paste("PSJS estimate of Tract ", toString(tract), sep = ""),
xlab = "number of IGC events", ylab = "PSJS estimated tract length")
abline(h = tract, col = "red")
abline(h = realized.tract.dist(492, 1/tract)$mean, col = "blue")
abline(h = mean(sim_info["mean subtract length", ]), col = "green")
plot(sim_info["num IGC with at least two variant sites", colnames(target_summary)[col.names]],
target_summary["tract_length", col.names],
main = paste(" PSJS estimated vs num IGC >1 variant sites - Tract ", toString(tract), sep = ""),
xlab = "num IGC with at least two variant sites", ylab = "PSJS estimated tract length")
abline(h = tract, col = 2)
abline(h = mean(sim_info["mean subtract length", ]), col = "green")
# Now plot kappa estimates
plot(sim_info["num IGC", colnames(target_summary)[col.names]],
target_summary["kappa", col.names],
main = paste("PSJS kappa, Tract = ", toString(tract), sep = ""),
xlab = "Num IGC", ylab = "PSJS estimated kappa")
abline(h = 14.46399, col = 2)
# Now plot r2 estimates
plot(sim_info["num IGC", colnames(target_summary)[col.names]],
target_summary["r2", col.names],
main = paste("PSJS r2, Tract = ", toString(tract), sep = ""),
xlab = "Num IGC", ylab = "PSJS estimated r2")
abline(h = 0.5391702, col = 2)
# Now plot r3 estimates
plot(sim_info["num IGC", colnames(target_summary)[col.names]],
target_summary["r3", col.names],
main = paste("PSJS r3, Tract = ", toString(tract), sep = ""),
xlab = "Num IGC", ylab = "PSJS estimated r3")
abline(h = 11.58006, col = 2)
# Now plot initiation rate estimates
plot(sim_info["num IGC", colnames(target_summary)[col.names]],
target_summary["init_rate", col.names],
main = paste("PSJS init_rate, Tract = ", toString(tract), sep = ""),
xlab = "Num IGC", ylab = "PSJS estimated init_rate")
abline(h = 22.58153 / tract, col = 2)
# Now plot tract p estimates
plot(sim_info["num IGC", colnames(target_summary)[col.names]],
1.0/target_summary["tract_length", col.names],
main = paste("PSJS tract_p, Tract = ", toString(tract), sep = ""),
xlab = "Num IGC", ylab = "PSJS estimated tract_p")
abline(h = 1.0 / tract, col = 2)
# Now plot Tau estimates
plot(sim_info["num IGC", colnames(target_summary)[col.names]],
target_summary["init_rate", col.names]*target_summary["tract_length", col.names],
main = paste("PSJS Tau, Tract = ", toString(tract), sep = ""),
xlab = "Num IGC", ylab = "PSJS estimated Tau")
abline(h = 22.58153, col = 2)
plot(sim_info["num IGC", colnames(target_summary)[col.names]],
target_summary["init_rate", col.names]*target_summary["tract_length", col.names]*3.0/(1.0 +target_summary["r2", col.names] + target_summary["r3", col.names]),
main = paste("PSJS Weighted Tau, Tract = ", toString(tract), sep = ""),
xlab = "Num IGC", ylab = "PSJS Tau*3/(1+r2+r3)")
abline(h = 5.16376333125, col = 2)
# Now plot initiation rate vs tract length
plot(target_summary["tract_length", col.names],
target_summary["init_rate", col.names],
main = paste("PSJS init_rate, Tract = ", toString(tract), sep = ""),
xlab = "Tract length", ylab = "initiation rate")
lines(sort(target_summary["tract_length", col.names]), 22.58153/sort(target_summary["tract_length", col.names]),
col = "red", type = "l")
plot(sim_info["mean realized tract length", colnames(target_summary)[col.names]],
target_summary["tract_length", col.names],
main = paste(" mean realized vs PSJS estimated Tract ", toString(tract), sep = ""),
xlab = "mean realized IGC tract length", ylab = "PSJS estimated")
abline(a= 0.0, b = 1.0, col = "red")
plot(sim_info["mean potential tract length", colnames(target_summary)[col.names]],
target_summary["tract_length", col.names],
main = paste(" mean potential vs PSJS estimated Tract ", toString(tract), sep = ""),
xlab = "mean potential IGC tract length", ylab = "PSJS estimated")
abline(a = 0.0, b = 1.0, col = 2)
plot(sim_info["mean subtract length", colnames(target_summary)[col.names]],
target_summary["tract_length", col.names],
main = paste(" mean longest variant pair length vs PSJS estimated Tract ", toString(tract), sep = ""),
xlab = "mean longest variant pair length", ylab = "PSJS estimated")
abline(a = 0.0, b = 1.0, col = "green")
print(paste("Tract = ", toString(tract), ".0 combined PSJS HKY Results", sep = ""))
print(matrix(c("Total samples", sum(col.names),
"mean estimates", mean(target_summary["tract_length", col.names]),
"sd estimates", sd(target_summary["tract_length", col.names]),
"mean longest variant pair", mean(sim_info["mean subtract length", col.names]),
"sd longest variant pair", sd(sim_info["mean subtract length", col.names])), 2, 5))
}
target_summary <- get(paste("PSJS_HKY_Tract_", toString(tract), "_combined_summary", sep = ""))
col.names <- target_summary["tract_length", ] < 10*tract
sim_info <- get(paste("sim.tract.", toString(tract), sep = ""))
hist(target_summary["tract_length", col.names], breaks = 50,
main = paste("PSJS Estimated Tract length 1/p, Tract = ", toString(tract), ".0 ", sep = ""))
abline(v =  realized.tract.dist(492, 1.0/tract)$mean, col = "blue")
hist(target_summary["tract_length", col.names], breaks = 50,
main = paste("PSJS Estimated Tract length 1/p, Tract = ", toString(tract), ".0 ", sep = ""))
tract
Tract.list <- c(3.0, 10.0, 50.0, 100.0)
for(tract in Tract.list){
target_summary <- get(paste("PSJS_HKY_Tract_", toString(tract), "_combined_summary", sep = ""))
col.names <- target_summary["tract_length", ] < 10*tract
sim_info <- get(paste("sim.tract.", toString(tract), sep = ""))
hist(target_summary["tract_length", col.names], breaks = 50,
main = paste("PSJS Estimated Tract length 1/p, Tract = ", toString(tract), ".0 ", sep = ""))
abline(v =  realized.tract.dist(492, 1.0/tract)$mean, col = "blue")
abline(v =  tract, col = 2)
abline(v =  mean(sim_info["mean subtract length", ]), col = "green")
hist(-log(target_summary["tract_length", col.names]), breaks = 50,
main = paste("PSJS Estimated ln(p), Tract = ", toString(tract), ".0", sep = ""))
abline(v = log(1.0 / realized.tract.dist(492, 1.0/tract)$mean), col = "blue")
abline(v = log(1.0 / tract), col = 2)
abline(v = log(1.0 / mean(sim_info["mean subtract length", ])), col = "green")
hist((1/target_summary["tract_length", col.names]), breaks = 50,
main = paste("PSJS Estimated p, Tract = ", toString(tract), ".0", sep = ""))
abline(v = 1.0 / tract, col = 2)
abline(v = 1.0 / realized.tract.dist(492, 1.0/tract)$mean, col = "blue")
abline(v = 1.0 / mean(sim_info["mean subtract length", ]), col = "green")
plot(sim_info["num IGC", ], sim_info["mean potential tract length", ],
main = paste("Simulated potential tract length, Tract = ", toString(tract), sep = ""),
xlab = "number of IGC events", ylab = "mean potential tract length")
abline(h = tract, col = "red")
abline(h = mean(sim_info["mean subtract length", ]), col = "green")
plot(sim_info["num IGC", ], sim_info["mean realized tract length", ],
main = paste("Simulated realized tract length, Tract = ", toString(tract), sep = ""),
xlab = "number of IGC events", ylab = "mean realized tract length")
abline(h = realized.tract.dist(492, 1/tract)$mean, col = "red")
abline(h = mean(sim_info["mean subtract length", ]), col = "green")
plot(sim_info["num IGC", colnames(target_summary)[col.names]], target_summary["tract_length", col.names],
main = paste("PSJS estimate of Tract ", toString(tract), sep = ""),
xlab = "number of IGC events", ylab = "PSJS estimated tract length")
abline(h = tract, col = "red")
abline(h = realized.tract.dist(492, 1/tract)$mean, col = "blue")
abline(h = mean(sim_info["mean subtract length", ]), col = "green")
plot(sim_info["num IGC", colnames(target_summary)[col.names]], target_summary["tract_length", col.names],
main = paste("PSJS estimate of Tract ", toString(tract), sep = ""),
xlab = "number of IGC events", ylab = "PSJS estimated tract length")
abline(h = tract, col = "red")
abline(h = realized.tract.dist(492, 1/tract)$mean, col = "blue")
abline(h = mean(sim_info["mean subtract length", ]), col = "green")
plot(sim_info["num IGC with at least two variant sites", colnames(target_summary)[col.names]],
target_summary["tract_length", col.names],
main = paste(" PSJS estimated vs num IGC >1 variant sites - Tract ", toString(tract), sep = ""),
xlab = "num IGC with at least two variant sites", ylab = "PSJS estimated tract length")
abline(h = tract, col = 2)
abline(h = mean(sim_info["mean subtract length", ]), col = "green")
# Now plot kappa estimates
plot(sim_info["num IGC", colnames(target_summary)[col.names]],
target_summary["kappa", col.names],
main = paste("PSJS kappa, Tract = ", toString(tract), sep = ""),
xlab = "Num IGC", ylab = "PSJS estimated kappa")
abline(h = 14.46399, col = 2)
# Now plot r2 estimates
plot(sim_info["num IGC", colnames(target_summary)[col.names]],
target_summary["r2", col.names],
main = paste("PSJS r2, Tract = ", toString(tract), sep = ""),
xlab = "Num IGC", ylab = "PSJS estimated r2")
abline(h = 0.5391702, col = 2)
# Now plot r3 estimates
plot(sim_info["num IGC", colnames(target_summary)[col.names]],
target_summary["r3", col.names],
main = paste("PSJS r3, Tract = ", toString(tract), sep = ""),
xlab = "Num IGC", ylab = "PSJS estimated r3")
abline(h = 11.58006, col = 2)
# Now plot initiation rate estimates
plot(sim_info["num IGC", colnames(target_summary)[col.names]],
target_summary["init_rate", col.names],
main = paste("PSJS init_rate, Tract = ", toString(tract), sep = ""),
xlab = "Num IGC", ylab = "PSJS estimated init_rate")
abline(h = 22.58153 / tract, col = 2)
# Now plot tract p estimates
plot(sim_info["num IGC", colnames(target_summary)[col.names]],
1.0/target_summary["tract_length", col.names],
main = paste("PSJS tract_p, Tract = ", toString(tract), sep = ""),
xlab = "Num IGC", ylab = "PSJS estimated tract_p")
abline(h = 1.0 / tract, col = 2)
# Now plot Tau estimates
plot(sim_info["num IGC", colnames(target_summary)[col.names]],
target_summary["init_rate", col.names]*target_summary["tract_length", col.names],
main = paste("PSJS Tau, Tract = ", toString(tract), sep = ""),
xlab = "Num IGC", ylab = "PSJS estimated Tau")
abline(h = 22.58153, col = 2)
plot(sim_info["num IGC", colnames(target_summary)[col.names]],
target_summary["init_rate", col.names]*target_summary["tract_length", col.names]*3.0/(1.0 +target_summary["r2", col.names] + target_summary["r3", col.names]),
main = paste("PSJS Weighted Tau, Tract = ", toString(tract), sep = ""),
xlab = "Num IGC", ylab = "PSJS Tau*3/(1+r2+r3)")
abline(h = 5.16376333125, col = 2)
# Now plot initiation rate vs tract length
plot(target_summary["tract_length", col.names],
target_summary["init_rate", col.names],
main = paste("PSJS init_rate, Tract = ", toString(tract), sep = ""),
xlab = "Tract length", ylab = "initiation rate")
lines(sort(target_summary["tract_length", col.names]), 22.58153/sort(target_summary["tract_length", col.names]),
col = "red", type = "l")
plot(sim_info["mean realized tract length", colnames(target_summary)[col.names]],
target_summary["tract_length", col.names],
main = paste(" mean realized vs PSJS estimated Tract ", toString(tract), sep = ""),
xlab = "mean realized IGC tract length", ylab = "PSJS estimated")
abline(a= 0.0, b = 1.0, col = "red")
plot(sim_info["mean potential tract length", colnames(target_summary)[col.names]],
target_summary["tract_length", col.names],
main = paste(" mean potential vs PSJS estimated Tract ", toString(tract), sep = ""),
xlab = "mean potential IGC tract length", ylab = "PSJS estimated")
abline(a = 0.0, b = 1.0, col = 2)
plot(sim_info["mean subtract length", colnames(target_summary)[col.names]],
target_summary["tract_length", col.names],
main = paste(" mean longest variant pair length vs PSJS estimated Tract ", toString(tract), sep = ""),
xlab = "mean longest variant pair length", ylab = "PSJS estimated")
abline(a = 0.0, b = 1.0, col = "green")
print(paste("Tract = ", toString(tract), ".0 combined PSJS HKY Results", sep = ""))
print(matrix(c("Total samples", sum(col.names),
"mean estimates", mean(target_summary["tract_length", col.names]),
"sd estimates", sd(target_summary["tract_length", col.names]),
"mean longest variant pair", mean(sim_info["mean subtract length", col.names]),
"sd longest variant pair", sd(sim_info["mean subtract length", col.names])), 2, 5))
}
